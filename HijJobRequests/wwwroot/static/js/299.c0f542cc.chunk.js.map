{"version":3,"file":"static/js/299.c0f542cc.chunk.js","mappings":"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","sources":["views/customizedComponents/ServerSidePagination.js","views/customizedComponents/ServerSideTable.js","views/pages/SystemSetting/Roles/Form.js","views/pages/SystemSetting/Roles/Add.js","views/pages/SystemSetting/Roles/Show.js","views/pages/SystemSetting/Roles/List.js"],"sourcesContent":["import { useTranslation } from \"@hooks/useTranslation\";\r\nimport { select } from \"glamor\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { Label, Input } from \"reactstrap\";\r\n\r\n/**\r\n * @param {Number} totalRecords\r\n * @param {Function} onPagination\r\n * @param {Number} perPage\r\n * @param {Function} setPerPage\r\n * @param {Number} currentPage\r\n * @param {Function} setCurrentPage\r\n * @returns {JSX.Element}\r\n */\r\nexport default function ServerSidePagination({\r\n  totalRecords,\r\n  onPagination,\r\n  perPage,\r\n  setPerPage,\r\n  currentPage,\r\n  setCurrentPage,\r\n}) {\r\n  const count = Math.ceil(totalRecords / perPage);\r\n  const { t } = useTranslation();\r\n  const handlePageChange = (rowsPerPage, page) => {  \r\n    setPerPage(rowsPerPage);\r\n    setCurrentPage(page+1); \r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"d-flex sc-fzoNJl dGqwdB rdt_Pagination\"\r\n      style={{ paddingRight: \"1em\" }}\r\n    >\r\n      <ReactPaginate\r\n        previousLabel=\"\"\r\n        nextLabel=\"\"\r\n        pageCount={count || 1}\r\n        activeClassName=\"active\"\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        pageRangeDisplayed={2}\r\n        onPageChange={({ selected }) => {          \r\n          handlePageChange(perPage, selected);\r\n        }}\r\n        pageClassName=\"page-item\"\r\n        nextLinkClassName=\"page-link\"\r\n        nextClassName=\"page-item next\"\r\n        previousClassName=\"page-item prev\"\r\n        previousLinkClassName=\"page-link\"\r\n        pageLinkClassName=\"page-link\"\r\n        containerClassName=\"pagination react-paginate justify-content-start my-2 pr-1\"\r\n      />\r\n      <div className=\"d-flex align-items-center w-100\">\r\n        <Label for=\"rows-per-page\">{t(\"Show\")}</Label>\r\n        <Input\r\n          className=\"form-control mx-50\"\r\n          type=\"select\"\r\n          id=\"rows-per-page\"\r\n          value={perPage}\r\n          onChange={(e) => {\r\n            handlePageChange(e.target.value, 0);\r\n          }}\r\n          style={{\r\n            direction: \"ltr\",\r\n            width: \"5rem\",\r\n            padding: \"0 0.8rem\",\r\n            backgroundPosition:\r\n              \"calc(100% - 3px) 11px, calc(100% - 20px) 13px, 100% 0\",\r\n          }}\r\n        >\r\n          <option value={5}>5</option>\r\n          <option value={10}>10</option>\r\n          <option value={25}>25</option>\r\n          <option value={50}>50</option>\r\n          <option value={totalRecords}>الكل</option>\r\n        </Input>\r\n        <Label for=\"rows-per-page\">{t(\"Rows\")}</Label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { ChevronDown } from \"react-feather\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Card, Input, Label, Row, Spinner } from \"reactstrap\";\r\nimport ServerSidePagination from \"./ServerSidePagination\";\r\n// ** Styles\r\nimport \"../../@core/scss/react/libs/tables/react-dataTable-component.scss\";\r\nimport { useTranslation } from \"@hooks/useTranslation\";\r\n\r\n/**\r\n * Table listing data with server side pagination\r\n *\r\n * @param {Array} columns\r\n * @param {Array} data\r\n * @param {Number} totalRecords total number of elements\r\n * @param {Function} onPagination on pagination change (page or perPage change)\r\n * @param {Boolean} progress indicator for whether loading has finished or not\r\n * @param {Boolean} showAddBtn whether to show add button or not\r\n * @param {Function} handleAddButton\r\n * @param {String} addBtnUrl add button URL if add form is a separate page\r\n * @param {String} addButtonText\r\n * @param {Boolean} showSearch\r\n * @param {Integer} refresherKey a key to re-render table on change\r\n * @returns {JSX.Element}\r\n */\r\n\r\nexport default function ServerSideTable({\r\n  columns,\r\n  data,\r\n  totalRecords,\r\n  onPagination = () => {},\r\n  progress = false,\r\n  showAddBtn = true,\r\n  handleAddButton = () => {},\r\n  addBtnUrl,\r\n  showSearch = true,\r\n  refresherKey = 1,\r\n}) {\r\n  const [perPage, setPerPage] = useState(5);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [key, setKey] = useState(1);\r\n  const { t } = useTranslation();\r\n\r\n  const updatePerPage = (num) => {\r\n    setPerPage(parseInt(num, 10));\r\n    setKey((k) => k + 1);\r\n  };\r\n  \r\n  useEffect(() => { \r\n \r\n  onPagination(currentPage, perPage, searchTerm);\r\n   }, [currentPage, perPage, searchTerm, refresherKey,totalRecords]);\r\n\r\n  const addButton = () =>\r\n    showAddBtn ? (\r\n      addBtnUrl ? (\r\n        <div>\r\n          <Link to={addBtnUrl}>\r\n            <Button.Ripple color=\"primary\">{t(\"Add\")}</Button.Ripple>\r\n          </Link>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <Button.Ripple color=\"primary\" onClick={() => handleAddButton()}>\r\n            {t(\"Add\")}\r\n          </Button.Ripple>\r\n        </div>\r\n      )\r\n    ) : null;\r\n\r\n  return (\r\n    <Card>\r\n      <Row className=\"justify-content-end mx-0 ml-1\">\r\n        <div className=\"invoice-list-table-header w-100 mr-1 ml-50 mt-2 mb-75 mr-2\">\r\n          <div className=\"d-flex\" style={{ justifyContent: \"space-between\" }}>\r\n            {data?.length>0 ? showSearch && (\r\n              <div className=\"d-flex align-items-center mb-sm-0 mb-1 mr-1\">\r\n                <Label className=\"mb-0\" for=\"search-invoice\">\r\n                  {t(\"Search\")}\r\n                </Label>\r\n                <Input\r\n                  id=\"search-invoice\"\r\n                  className=\"ml-50 w-100\"\r\n                  type=\"text\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => {\r\n                    if (\r\n                      e.target.value[0] == \"{\" &&\r\n                      e.target.value[e.target.value.length - 1] == \"}\"\r\n                    ) {\r\n                      let obj = JSON.parse(e.target.value);\r\n                      let approvalNum = obj.approvalNum;\r\n                      setSearchTerm(approvalNum);\r\n                    } else {\r\n                      setSearchTerm(e.target.value);\r\n                    }\r\n                  }}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </div>):null\r\n            }\r\n            {addButton()}\r\n          </div>\r\n        </div>\r\n      </Row>\r\n      <DataTable\r\n        key={key}\r\n        noHeader\r\n        responsive\r\n        className=\"react-dataTable\"\r\n        sortIcon={<ChevronDown size={10} />}\r\n        columns={columns}\r\n        data={data}\r\n        pagination\r\n        paginationPerPage={perPage}\r\n        paginationComponent={() => (\r\n          <ServerSidePagination\r\n            totalRecords={totalRecords}\r\n            perPage={perPage}\r\n            setPerPage={updatePerPage}\r\n            currentPage={currentPage}\r\n            setCurrentPage={setCurrentPage} \r\n            onPagination={onPagination}\r\n           />\r\n        )}\r\n        noDataComponent={\r\n          <div\r\n            className=\"noContent\"\r\n            style={{ width: \"100%\", textAlign: \"center\" }}\r\n          >\r\n            <p style={{ margin: \"1em\" }}> \r\n              {\" \"}\r\n            {t(\"No Data Found\")}</p>\r\n          </div>\r\n        }\r\n        progressPending={progress}\r\n        progressComponent={\r\n          <div\r\n            className=\"react-datatable-loader\"\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              textAlign: \"center\",\r\n              padding: \"2%\",\r\n            }}\r\n          >\r\n            {t(\"Loading ......\")}\r\n            &nbsp; &nbsp;\r\n            <Spinner />\r\n          </div>\r\n        }\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n","import { Card, CardBody, Col, FormGroup, Input, Label, Row, Button, CustomInput } from \"reactstrap\";\r\n  import { useTranslation } from \"@hooks/useTranslation\";\r\n \r\nexport default function ({ formik, typeForm  }) {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody>\r\n        <Row>\r\n            <Col sm={12}>\r\n              <FormGroup>\r\n                <Label for=\"name\">{t(\"Name\")}</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder={t(\"Name\")}\r\n                  autoComplete=\"off\"\r\n                  {...formik.getFieldProps('name')}\r\n                  disabled={typeForm==\"show\"}\r\n                />\r\n                 {formik.touched.name && formik.errors.name ? (\r\n                  <small className=\"text-danger\">{formik.errors.name}</small>\r\n                ) : null}\r\n              </FormGroup>\r\n             </Col>  \r\n            <Col sm={12}>\r\n              <FormGroup>\r\n                <Label for=\"normalizedName\">{t(\"normalizedName\")}</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder={t(\"normalizedName\")}\r\n                  autoComplete=\"off\"\r\n                  {...formik.getFieldProps('normalizedName')}\r\n                  disabled={typeForm==\"show\"}\r\n                />\r\n                 {formik.touched.normalizedName && formik.errors.normalizedName ? (\r\n                  <small className=\"text-danger\">{formik.errors.normalizedName}</small>\r\n                ) : null}\r\n              </FormGroup>\r\n             </Col>  \r\n             <Col sm={6}>\r\n  <FormGroup>\r\n    <Label for=\"active\">{t(\"active\")}</Label>\r\n    <CustomInput\r\n      type=\"switch\"\r\n      id=\"activeSwitch\"\r\n      name=\"active\"\r\n       autoComplete=\"off\"\r\n      checked={formik.values?.active}\r\n      onChange={formik.handleChange}\r\n      disabled={typeForm === \"show\"}\r\n    />\r\n  </FormGroup>\r\n</Col>\r\n </Row>\r\n          <Row style={{textAlign:\"center\" ,justifyContent:\"center\"}}>\r\n            \r\n<Col sm={6}>\r\n  <Button color=\"primary\" onClick={() => {formik.submitForm()}}>\r\n    {typeForm==\"add\"?t(\"Add\"):typeForm==\"edit\"?t(\"Edit\"):t(\"Cancel\")}\r\n  </Button>\r\n</Col>\r\n</Row>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Form from \"./Form\";\r\nimport { useCallback, useMemo } from \"react\";\r\nimport { createPostRequest } from \"../../../../utility/services/requests\";\r\nimport ErrorPopup   from \"../../../customizedComponents/ErrorPopup\";\r\n import { Modal, ModalBody, ModalHeader } from \"reactstrap\";\r\nimport { X } from \"react-feather\";\r\n\r\n\r\n\r\nconst Add = ({ t, handleModal, open, forceUpdate }) => {\r\n  const title = t(\"NewAdd\");\r\n  const toggleModal = useCallback(() => {\r\n    formik.resetForm();\r\n    handleModal();\r\n  }, [handleModal]);\r\n  const validationSchema = useMemo(\r\n    () =>\r\n      yup.object().shape({\r\n        name: yup.string().required(`${t(\"RequiredAddName\")}`),\r\n      }),\r\n      [t]\r\n    );\r\n    \r\n    const formik = useFormik  ({\r\n      initialValues: {\r\n        name: null,\r\n        active: true,\r\n      },\r\n      validationSchema,\r\n      onSubmit: (values) => {\r\n        createPostRequest({ endPoint: \"Haj/HajIdentityRole/Post\" })({\r\n          body: values,\r\n          onSuccess: () => {\r\n            toggleModal();\r\n            forceUpdate();\r\n            formik.resetForm();\r\n          },\r\n          onFailure: () => {\r\n            ErrorPopup(\"تعذر الإضافة\");\r\n          },\r\n        });\r\n      },\r\n  });\r\n  \r\n  const CloseBtn = useMemo(\r\n    () => (\r\n      <div style={{ display: \"inline-block\" }}>\r\n        <X style={{ marginLeft: \"20px\" }} className=\"cursor-pointer\" size={20} onClick={toggleModal} />\r\n      </div>\r\n    ),\r\n    [toggleModal]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Modal isOpen={open} toggle={toggleModal} style={{ maxWidth: \"20%\" }}>\r\n        <input hidden name=\"screenId\" defaultValue=\"city_ADD_MODAL_01\" />\r\n        <ModalHeader className=\"mb-3\" toggle={toggleModal} close={CloseBtn} tag=\"div\">\r\n          <h3 className=\"modal-title\">{title}</h3>\r\n        </ModalHeader>\r\n        <ModalBody className=\"flex-grow-1\">\r\n          <Form formik={formik} typeForm=\"add\" />\r\n        </ModalBody>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Add;\r\n","import { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Form from \"./Form\";\r\nimport { useState, useCallback, useMemo, useEffect } from \"react\";\r\nimport { createGetRequest } from \"../../../../utility/services/requests\";\r\n  import { Modal, ModalBody, ModalHeader } from \"reactstrap\";\r\nimport { X } from \"react-feather\";\r\n\r\n\r\n\r\nconst Show = ({ t, handleShowModal, open, forceUpdate, id }) => {\r\n  const TITLE = t(\"Show\");\r\n  const [initialValues, setInitialValues] = useState({\r\n    name: \"\",\r\n    active: true,\r\n  });\r\n  \r\n  const toggleModal = useCallback(() => {\r\n    formik.resetForm();\r\n    handleShowModal();\r\n  }, [handleShowModal]);\r\n  \r\n  const validationSchema = useMemo(\r\n    () =>\r\n      yup.object().shape({\r\n        name: yup.string().required(`${t(\"RequiredAddName\")}`),\r\n      }),\r\n      [t]\r\n    );\r\n    \r\n    useEffect(() => {\r\n      if (open) {\r\n        createGetRequest({ endPoint: `Haj/HajIdentityRole/GetById/${id}` })({\r\n          onSuccess: (response) => {\r\n            setInitialValues(response);\r\n          },\r\n        });\r\n      }\r\n    }, [open, id]);\r\n    \r\n    const formik = useFormik({\r\n      initialValues,\r\n      enableReinitialize: true, // تمكين إعادة التهيئة\r\n      validationSchema,\r\n      onSubmit: () => { \r\n      toggleModal()\r\n     },\r\n  });\r\n\r\n  const CloseBtn = useMemo(\r\n    () => (\r\n      <div style={{ display: \"inline-block\" }}>\r\n        <X style={{ marginLeft: \"20px\" }} className=\"cursor-pointer\" size={20} onClick={toggleModal} />\r\n      </div>\r\n    ),\r\n    [toggleModal]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Modal isOpen={open} toggle={toggleModal} style={{ maxWidth: \"20%\" }}>\r\n        <input hidden name=\"NameId\" defaultValue=\"Type_Edit_MODAL_01\" />\r\n        <ModalHeader className=\"mb-3\" toggle={toggleModal} close={CloseBtn} tag=\"div\">\r\n          <h3 className=\"modal-title\"> {TITLE}      </h3>\r\n        </ModalHeader>\r\n        <ModalBody className=\"flex-grow-1\">\r\n          <Form formik={formik} typeForm=\"show\" />\r\n        </ModalBody>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Show;\r\n","import { useState, useCallback, useMemo } from \"react\";\r\nimport { createDeleteRequest, createGetRequest } from \"../../../../utility/services/requests\";\r\nimport PageTitle from \"../../../customizedComponents/PageTitle\";\r\nimport BreadcrumbsDefault from \"../../../customizedComponents/breadcrumbs\";\r\nimport { ConfirmCancelPopup, deleteIconColor, editIconColor,showIconColor, Icons } from \"../../../customizedComponents/generic_page\";\r\nimport ServerSideTable from \"../../../customizedComponents/ServerSideTable\";\r\n import Add from \"./Add\";\r\nimport Edit from \"./Edit\";\r\n import Show from \"./Show\";\r\n  import { useTranslation } from \"@hooks/useTranslation\"; \r\n import { Link } from \"react-router-dom\";\r\n import CustomTree from \"./CustomTree\";\r\nimport { Card, CardBody } from \"reactstrap\";\r\n \r\n \r\n\r\nexport default function List() {\r\n  const [store, setStore] = useState([]);\r\n  const [rowID, setRowID] = useState([]);\r\n  const [addModal, setAddModal] = useState(false);\r\n  const [updateModal, setUpdateModal] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [key, setKey] = useState(1);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const { t } = useTranslation();  \r\n  const title = t(\"Roles\");\r\n  const breadcrumbs = [\r\n    {\r\n      link: null,\r\n     name: title,\r\n   },\r\n ];;\r\n\r\n   const forceUpdate = useCallback(() => {\r\n    setKey((prevKey) => prevKey + 1);\r\n  }, []);\r\n\r\n   const handleModal = useCallback(() => {\r\n    setAddModal((prev) => !prev);\r\n  }, []);\r\n\r\n  const handleUpdateModal = useCallback((id) => {\r\n    setRowID(id)\r\n    setUpdateModal((prev) => !prev);\r\n  }, []);\r\n  const handleShowModal = useCallback((id) => {\r\n    setRowID(id)\r\n    setShowModal((prev) => !prev);\r\n  }, []);\r\n   const handleDelete = useCallback(\r\n    (id) => {\r\n      ConfirmCancelPopup({message:t(\"MessageDelete\")}).then((out) => {\r\n        if (out.isConfirmed) {\r\n          createDeleteRequest({ endPoint: \"Haj/HajIdentityRole/Delete/\" })({\r\n            id: id,\r\n            onSuccess: forceUpdate,\r\n          });\r\n        }\r\n      });\r\n    },\r\n    [forceUpdate]\r\n  );\r\n \r\n   const columns = useMemo(\r\n    () => [\r\n      {\r\n        name: t(\"Name\"),\r\n        selector: (row) =>row?.name,\r\n      },\r\n      {\r\n        cell: (row) => (\r\n          <div>\r\n            <>\r\n               <Icons.TbEye color={showIconColor} size={25} className=\"mr-50 cursor-pointer\" onClick={() => handleShowModal(row?.id)} />\r\n            </>\r\n            <>\r\n            <Link to={`/role/${row.name}/edit`}>\r\n            <Icons.TbEditCircle color={editIconColor} size={25} className=\"mr-50 cursor-pointer\" />\r\n            </Link>\r\n            </>\r\n             <Icons.MdDeleteForever\r\n              color={deleteIconColor}\r\n              size={25}\r\n              className=\"mr-50 cursor-pointer\"\r\n              onClick={() => handleDelete(row.id)}\r\n            />\r\n          </div>\r\n        ),\r\n        minWidth: \"150px\",\r\n      },\r\n    ],\r\n    [handleDelete]\r\n  );\r\n\r\n   const fetchStore = useCallback(\r\n    (PageNumber = 1, PageSize = 5, PageSearch = \"\") => {\r\n      setIsLoading(true);\r\n      createGetRequest({ endPoint: \"Haj/HajIdentityRole/GetAll\" })({\r\n        params: { PageNumber: PageNumber , PageSize, PageSearch: PageSearch.trimEnd() },\r\n        onSuccess: (data) => {\r\n          setStore(data);\r\n          setIsLoading(false);\r\n        },\r\n      });\r\n    },\r\n    []\r\n  );\r\n \r\n  return (\r\n    <>\r\n      <PageTitle title={title} />\r\n       <BreadcrumbsDefault list={breadcrumbs} /> \r\n       \r\n     <ServerSideTable\r\n         refresherKey={key}\r\n        columns={columns}\r\n        data={store?.data}\r\n        totalRecords={store?.totalRecords}\r\n        isLoading={isLoading}\r\n        onPagination={fetchStore}\r\n        handleAddButton={handleModal}\r\n        enableAdd={true}\r\n        enableSearch={true}\r\n        enableExtraction={false}\r\n      />\r\n      <Add open={addModal} handleModal={handleModal} forceUpdate={forceUpdate} t={t} />\r\n       <Show open={showModal} handleShowModal={handleShowModal} forceUpdate={forceUpdate} id={rowID} t={t} />\r\n\r\n    </>\r\n  );\r\n}\r\n"],"names":["ServerSidePagination","_ref","totalRecords","onPagination","perPage","setPerPage","currentPage","setCurrentPage","count","Math","ceil","t","useTranslation","handlePageChange","rowsPerPage","page","_jsxs","className","style","paddingRight","children","_jsx","ReactPaginate","previousLabel","nextLabel","pageCount","activeClassName","forcePage","pageRangeDisplayed","onPageChange","_ref2","selected","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","Label","for","Input","type","id","value","onChange","e","target","direction","width","padding","backgroundPosition","ServerSideTable","columns","data","progress","showAddBtn","handleAddButton","addBtnUrl","showSearch","refresherKey","useState","searchTerm","setSearchTerm","key","setKey","updatePerPage","num","parseInt","k","useEffect","Card","Row","justifyContent","length","approvalNum","JSON","parse","autoComplete","Link","to","Button","Ripple","color","onClick","DataTable","noHeader","responsive","sortIcon","ChevronDown","size","pagination","paginationPerPage","paginationComponent","noDataComponent","textAlign","margin","progressPending","progressComponent","height","Spinner","_formik$values","formik","typeForm","_Fragment","CardBody","Col","sm","FormGroup","_objectSpread","placeholder","getFieldProps","disabled","touched","name","errors","normalizedName","CustomInput","checked","values","active","handleChange","submitForm","handleModal","open","forceUpdate","title","toggleModal","useCallback","resetForm","validationSchema","useMemo","yup","shape","required","concat","useFormik","initialValues","onSubmit","createPostRequest","endPoint","body","onSuccess","onFailure","ErrorPopup","CloseBtn","display","X","marginLeft","Modal","isOpen","toggle","maxWidth","hidden","defaultValue","ModalHeader","close","tag","ModalBody","Form","handleShowModal","TITLE","setInitialValues","createGetRequest","response","enableReinitialize","List","store","setStore","rowID","setRowID","addModal","setAddModal","updateModal","setUpdateModal","showModal","setShowModal","isLoading","setIsLoading","breadcrumbs","link","prevKey","prev","handleDelete","ConfirmCancelPopup","message","then","out","isConfirmed","createDeleteRequest","selector","row","cell","Icons","TbEye","showIconColor","TbEditCircle","editIconColor","MdDeleteForever","deleteIconColor","minWidth","fetchStore","PageNumber","arguments","undefined","PageSize","PageSearch","params","trimEnd","PageTitle","BreadcrumbsDefault","list","enableAdd","enableSearch","enableExtraction","Add","Show"],"sourceRoot":""}