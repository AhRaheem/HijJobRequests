{"version":3,"file":"static/js/146.8a55548c.chunk.js","mappings":"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","sources":["../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/logic/transformToNestObject.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/logic/focusOnErrorField.ts","../node_modules/react-hook-form/src/logic/removeAllEventListeners.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getMultipleSelectValue.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/utils/isDetached.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/logic/findRemovedFieldAndRemoveListener.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepMerge.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/logic/setFieldArrayDirtyFields.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/getFieldsValues.ts","../node_modules/react-hook-form/src/logic/isErrorStateChanged.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/getPath.ts","../node_modules/react-hook-form/src/logic/assignWatchFields.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/utils/isSelectInput.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/validationModeChecker.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/useForm.ts","../node_modules/react-hook-form/src/logic/attachEventListeners.ts","../node_modules/react-hook-form/src/utils/onDomRemove.ts","../node_modules/react-hook-form/src/useFormContext.tsx"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (\n    !['Set', 'Map', 'Object', 'Date', 'Array'].includes(\n      (data as Object).constructor?.name,\n    )\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(\n          shallowFieldsStateRef.current,\n          name,\n          Array.isArray(value) ? [...value] : { ...value },\n        );\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"names":["isHTMLElement","value","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","isNullOrUndefined","isObjectType","isObject","Array","isArray","Date","isKey","test","compact","filter","Boolean","stringToPath","input","replace","split","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","arguments","undefined","isUndefined","val","get","obj","defaultValue","result","reduce","focusOnErrorField","fields","fieldErrors","field","ref","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","previous","option","checked","getMultipleSelectValue","_ref2","selected","map","_ref3","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","concat","defaultResult","validResult","getCheckboxValue","values","_ref4","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","files","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","Object","keys","isBoolean","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","isPrimitive","deepMerge","target","source","targetValue","sourceValue","_a","deepEqual","object1","object2","isErrorObject","isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","assign","setFieldArrayDirtyFields","isString","getFieldsValues","shallowFieldsState","shouldUnregister","search","output","startsWith","find","isErrorStateChanged","_ref5","errors","error","validFields","fieldsWithValidation","previousError","isRegex","RegExp","getValueAndMessage","validationData","message","isFunction","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","types","validateField","async","_ref6","required","maxLength","minLength","min","max","pattern","validate","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","push","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","skipValidation","_ref7","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","substring","indexOf","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isSelectInput","isWeb","window","document","cloneObject","copy","File","includes","constructor","getTime","Set","Map","modeChecker","mode","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","formState","setFormState","useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","_ref8","radioRef","selectRef","_ref9","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","_ref10","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","_ref11","shouldSkipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","forceDelete","handleChange","fieldRef","findRemovedFieldAndRemoveListener","updateWatchedValue","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","_ref","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","useEffect","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","prop","control","useMemo","watch","reset","omitResetState","inputRef","closest","resetFieldArray","_ref12","resetRefs","clearErrors","inputName","setError","shouldFocus","FormContext","createContext","displayName"],"sourceRoot":""}